syntax = "proto3";
package com.github.dodo_cli.dodo_stage.types;

option go_package = "github.com/dodo-cli/dodo-stage/pkg/types";

message Backdrop {
  string name = 1;
  repeated string aliases = 2;

  string stage = 3;
  bool forward_stage = 4;
}

message Stage {
  string type = 1;
  Box box = 2;
  Resources resources = 3;
}

message Box {
  string user = 1;
  string name = 2;
  string version = 3;
  string access_token = 4;
}

message Resources {
  int64 cpu = 1;
  int64 memory = 2;
  repeated PersistentVolume volumes = 3;
  repeated UsbFilter usb_filters = 4;
}

message PersistentVolume {
  int64 size = 1;
}

message UsbFilter {
  string name = 1;
  string vendor_id = 2;
  string product_id = 3;
}

message Empty {}

message InitRequest {
  string name   = 1;
  string config = 3;
}

message RemoveRequest {
  bool force = 1;
  bool volumes = 2;
}

message ExistResponse {
  bool exist = 1;
}

message AvailableResponse {
  bool available = 1;
}

message SSHOptionsResponse {
  string hostname         = 1;
  int32  port             = 2;
  string username         = 3;
  string private_key_file = 4;
}

message DockerOptionsResponse {
  string version   = 1;
  string host      = 2;
  string ca_file   = 3;
  string cert_file = 4;
  string key_file  = 5;
}

service DockerStage {
  rpc Initialize(InitRequest) returns (Empty);
  rpc Create(Empty) returns (Empty);
  rpc Remove(RemoveRequest) returns (Empty);
  rpc Start(Empty) returns (Empty);
  rpc Stop(Empty) returns (Empty);
  rpc Exist(Empty) returns (ExistResponse);
  rpc Available(Empty) returns (AvailableResponse);
  rpc GetSSHOptions(Empty) returns (SSHOptionsResponse);
  rpc GetDockerOptions(Empty) returns (DockerOptionsResponse);
}
